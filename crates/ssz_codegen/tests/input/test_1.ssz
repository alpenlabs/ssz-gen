VAL_X = 42
VAL_Y = 64

AliasUintAlias = uint16
AliasVecA = Vector[uint8, 10]
AliasVecB = AliasVecA
AliasListAlias = List[uint8, 5]
AliasNested = AliasUintAlias

SIZE_ALIAS = VAL_Y
BitAlias = Bitlist[VAL_X]

class Alpha(Container):
    a: uint8
    b: uint16
    c: AliasVecB

class Beta(Container):
    d: AliasListAlias
    e: uint8
    f: AliasUintAlias

class Gamma(StableContainer[VAL_X]):
    g: Optional[uint8]
    h: Optional[List[AliasUintAlias, 8]]

BaseContainer = Container
BigStable = StableContainer[128]

class Delta(BaseContainer):
    z: boolean
    w: byte

class Epsilon(Gamma):
    i: Optional[uint8]
    j: Optional[AliasNested]

class Zeta(BigStable):
    u: Optional[Vector[uint8, 16]]
    v: Optional[AliasListAlias]

class TestType(Container):
    ccc: uint8
    ddd: byte
    eee: List[uint16, 3]

FirstUnion = Union[uint8, uint16]

class Eta(Container):
    l: Zeta
    m: TestType
    n: FirstUnion

UnionA = Union[uint8, uint8, uint16]
UnionB = Union[uint8, UnionA, uint32, List[byte, 12]]

UnionC = Union[AliasUintAlias, AliasUintAlias]

UnionD = Union[AliasUintAlias, AliasUintAlias]
UnionE = UnionD

class Theta(Container):
    o: UnionB
    p: UnionC
    q: AliasVecA

class Iota(Epsilon):
    r: Optional[List[AliasNested, 2]]
    s: Optional[uint8]

class Kappa(Container):
    t: Alpha
    u: Beta
    v: Bitvector[VAL_Y]

StableClassAlias = StableContainer[4]

class Lambda(StableClassAlias):
    w: Optional[uint16]
    x: Optional[uint8]

class Mu(Container):
    y: Lambda
    z: UnionA

AliasMu = Mu

class Nu(Container):
    zz: AliasMu
    aaa: Vector[bit, 4]
    bbb: BitAlias
    test: Union[null, AliasMu]

AliasOptionUnion = Union[uint8, Union[null, uint16]]

TestUnion = Union[null, uint8, uint16]
